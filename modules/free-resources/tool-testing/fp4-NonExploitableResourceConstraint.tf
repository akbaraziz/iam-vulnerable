resource "aws_iam_policy" "fp4-nonExploitableResourceConstraint" {
  name        = "fp4-nonExploitableResourceConstraint"
  path        = "/"
  description = "Allows privesc via iam:CreatePolicyVersion"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "iam:CreatePolicyVersion"
        Effect   = "Allow"
        Resource = "arn:aws:iam::aws:policy/fp4-*"
      },
    ]
  })
  tags = {
    yor_trace = "badd0583-7bad-48c1-950b-7c4db776bc6a"
  }
}

resource "aws_iam_role" "fp4-nonExploitableResourceConstraint-role" {
  name = "fp4-nonExploitableResourceConstraint-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          AWS = var.aws_assume_role_arn
        }
      },
    ]
  })
  tags = {
    yor_trace = "0cfbf5c6-e0b4-4845-9311-852de94e8f92"
  }
}


resource "aws_iam_user" "fp4-nonExploitableResourceConstraint-user" {
  name = "fp4-nonExploitableResourceConstraint-user"
  path = "/"
  tags = {
    yor_trace = "2897fc28-c464-4c09-80bb-f15a96b294ce"
  }
}

resource "aws_iam_access_key" "fp4-nonExploitableResourceConstraint-user" {
  user = aws_iam_user.fp4-nonExploitableResourceConstraint-user.name
}


resource "aws_iam_user_policy_attachment" "fp4-nonExploitableResourceConstraint-user-attach-policy" {
  user       = aws_iam_user.fp4-nonExploitableResourceConstraint-user.name
  policy_arn = aws_iam_policy.fp4-nonExploitableResourceConstraint.arn
}

resource "aws_iam_role_policy_attachment" "fp4-nonExploitableResourceConstraint-role-attach-policy" {
  role       = aws_iam_role.fp4-nonExploitableResourceConstraint-role.name
  policy_arn = aws_iam_policy.fp4-nonExploitableResourceConstraint.arn

}  